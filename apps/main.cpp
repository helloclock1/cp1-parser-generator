#include <boost/program_options.hpp>
#include <boost/program_options/detail/parsers.hpp>
#include <boost/program_options/options_description.hpp>
#include <boost/program_options/positional_options.hpp>
#include <boost/program_options/variables_map.hpp>
#include <cstring>
#include <fstream>
#include <string>

#include "Automaton.h"
#include "BNFParser.h"
#include "CodeGenerator.h"
#include "Entities.h"

int main(int argc, char **argv) {
    namespace po = boost::program_options;

    po::options_description desc("Parser generator options");
    desc.add_options()
        ("help", "produce help message")
        ("input", po::value<std::string>(), "input grammar file")
        ("generate-to", po::value<std::string>()->default_value("."), "relative path to a folder a parser will be generated to");

    po::options_description parser_opts("Parser options");
    parser_opts.add_options()
        ("json-tree", "include support for generating a parse tree to a JSON file (adds `nlohmann/json` dependency)")
        ("indent", po::value<size_t>()->default_value(4), "amount of spaces per indent in a JSON generated by the parser");

    po::positional_options_description positional_opts;
    positional_opts.add("input", 1);

    po::options_description all_opts;
    all_opts.add(desc).add(parser_opts);
    po::variables_map vm;
    po::store(
        po::command_line_parser(argc, argv)
            .options(all_opts)
            .positional(positional_opts)
            .run(),
        vm
    );
    po::notify(vm);

    if (argc < 2 || vm.count("help")) {
        std::cout << "Usage: " << argv[0] << " [options] <input>" << std::endl;
        std::cout << desc << std::endl;
        std::cout << parser_opts << std::endl;
        return 0;
    }
    if (!vm.contains("input")) {
        std::cerr << "No input file specified" << std::endl;
        return 1;
    }

    std::string filename = vm["input"].as<std::string>();
    GrammarParser gp(std::make_unique<std::ifstream>(filename));
    try {
        gp.Parse();
    } catch (const GrammarParserError &e) {
        std::cerr << "GrammarParserError" << e.what() << std::endl;
        return 2;
    }
    Grammar g = gp.Get();
    ParserGenerator a(g);
    ActionTable at = a.GetActionTable();
    GotoTable gt = a.GetGotoTable();
    try {
        CodeGenerator codegen(
            vm["generate-to"].as<std::string>(), at, gt, g,
            vm.count("json-tree"), vm["indent"].as<size_t>()
        );
        codegen.Generate();
    } catch (const CodeGeneratorError &e) {
        std::cerr << "CodeGeneratorError: " << e.what() << std::endl;
        return 4;
    }
    return 0;
}
